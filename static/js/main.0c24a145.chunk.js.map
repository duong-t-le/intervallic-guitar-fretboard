{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ALL_INTERVALS","QUIZ_ITEMS","ALL_NOTES","Collection","shuffle","Range","chromatic","sharps","li","i","length","d","j","Note","get","simplify","transpose","pc","console","log","concat","JSON","stringify","push","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","noteIndex","setNoteIndex","_React$useState3","_React$useState4","isCorrect","setCorrect","increaseNoteIndex","react_default","a","createElement","Fragment","map","option","name","type","key","value","onClick","selectOption","className","react_canvas_fretboard_dist_index_es","onFretboardClick","e","note","string","setTimeout","checkAnswer","selectedNotes","correct","interval","answer","results","color","getSelectedNotes","selectedNotesOct","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","root","document","getElementById","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.0c24a145.chunk.js","sourcesContent":["import React from 'react';\nimport { transpose, simplify } from '@tonaljs/note';\nimport { Note } from \"@tonaljs/tonal\";\nimport Range from \"@tonaljs/range\";\nimport Collection from \"@tonaljs/collection\";\nimport { Fretboard } from 'react-canvas-fretboard';\n\nimport './App.css';\n\nconst ALL_INTERVALS = ['P1', 'm3', 'M3', 'P5', 'm7', 'M7'];\nconst QUIZ_ITEMS = (() => {\n  const ALL_NOTES = Collection.shuffle(Range.chromatic([\"E2\", \"E5\"], { sharps: true }));\n  let li = [];\n  for (let i =0;i<ALL_NOTES.length;i++) {\n    let d = {};\n    for (let j=0;j<ALL_INTERVALS.length;j++) {\n      d[ALL_INTERVALS[j]] =  Note.get(simplify(transpose(ALL_NOTES[i], ALL_INTERVALS[j]))).pc;\n    }\n    console.log(`data: ${JSON.stringify(d)}`)\n    li.push(d);\n  }\n\n  // console.log('wha '+ALL_NOTES.map(function(n) {\n  //   return ALL_INTERVALS.map(function(interval) {\n  //     return {\n  //       interval : simplify(transpose(n, interval)\n  //     }\n  //   });\n  // }));\n\n  return li;\n})();\n\nfunction selectOption(option) {\n  console.log(`selected ${option}`)\n}\n\nfunction App() {\n  const [noteIndex, setNoteIndex] = React.useState(0);\n  const [isCorrect, setCorrect] = React.useState(false);\n\n  function increaseNoteIndex() {\n    setNoteIndex((noteIndex + 1) >= QUIZ_ITEMS.length ? 0 : noteIndex + 1);\n    console.log(noteIndex);\n    setCorrect(false);\n\n  }\n\n  function getSelectedNotes(noteIndex, correct) {\n    let interval = ALL_INTERVALS[1];\n    // let note = ALL_NOTES[noteIndex];\n    // let noteAnswer = Note.get(transpose(note, interval));\n    // console.log(noteAnswer)\n    // let answer = noteAnswer.pc;\n    // console.log(`note: ${note} answer: ${answer}`);\n\n    let answer = QUIZ_ITEMS[noteIndex];\n    let results = [\n      {\n        note: answer['P1'],\n        color: 'blue'\n      }\n    ];\n    if (isCorrect) {\n      results.push(\n        {\n          note: answer[interval],\n          color: 'red'\n        }\n      )\n    }\n    return results;\n  }\n\n  function checkAnswer(e) {\n    console.log(e.note.pc);\n    setCorrect(true);\n    setTimeout(() => { increaseNoteIndex() }, 2000);\n  }\n\n  return (\n    <>\n      <h2>Note: {Note.get(QUIZ_ITEMS[noteIndex]['P1']).pc}</h2>\n      <div>\n        <fieldset>\n          <legend>Interval Options</legend>\n          <ul>\n            {ALL_INTERVALS.map((option, i) => {\n              return (\n                <>\n                  <li>\n                    <input name=\"intervalSelection\" type=\"checkbox\" key={option} value={option} onClick={() => selectOption(option)}></input><label>{option}</label>\n                  </li>\n                </>\n              );\n            })}\n          </ul>\n        </fieldset>\n      </div>\n      {<input type=\"button\" onClick={() => increaseNoteIndex()} value=\"Change\" />}\n\n      <div className=\"App\">\n        <Fretboard\n          onFretboardClick={(e, note, string) => checkAnswer(e)}\n          selectedNotes={getSelectedNotes(noteIndex)}\n          selectedNotesOct={false}\n        />\n      </div>\n      <div>\n        <fieldset>\n          <legend>Audio Options</legend>\n\n          {/* <input type=\"radio\" id=\"kraken\" name=\"monster\" value=\"K\" />\n          <label for=\"kraken\">Kraken</label><br />\n\n          <input type=\"radio\" id=\"sasquatch\" name=\"monster\" value=\"S\" />\n          <label for=\"sasquatch\">Sasquatch</label><br /> */}\n        </fieldset>\n      </div>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = document.getElementById('root');\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  root\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}