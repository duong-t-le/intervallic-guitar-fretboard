{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ALL_NOTES","Collection","shuffle","Range","chromatic","sharps","getSelectedNotes","noteIndex","note","noteAnswer","Note","get","transpose","console","log","answer","pc","concat","color","simplify","displayNoteName","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setNoteIndex","react_default","a","createElement","Fragment","type","onClick","length","value","className","react_canvas_fretboard_dist_index_es","onFretboardClick","e","string","selectedNotes","id","name","for","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","root","document","getElementById","ReactDOM","render","StrictMode","src_App"],"mappings":"sQASMA,SAAYC,IAAWC,QAAQC,IAAMC,UAAU,CAAC,KAAM,MAAO,CAAEC,QAAQ,MAS7E,SAASC,EAAiBC,GACxB,IACIC,EAAOR,EAAUO,GACjBE,EAAaC,IAAKC,IAAIC,YAAUJ,EAFrB,OAGfK,QAAQC,IAAIL,GACZ,IAAIM,EAASN,EAAWO,GAExB,OADAH,QAAQC,IAAR,SAAAG,OAAqBT,EAArB,aAAAS,OAAqCF,IAC9B,CACL,CACEP,KAAMA,EACNU,MAAO,QAIT,CACEV,KAAMW,YAASJ,GACfG,MAAO,MACPE,iBAAiB,IAsCRC,MAjCf,WAAe,IAAAC,EACqBC,IAAMC,SAAS,GADpCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACNf,EADMkB,EAAA,GACKG,EADLH,EAAA,GAMb,OACEI,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,mBAAW/B,EAAUO,IACrBsB,EAAAC,EAAAC,cAAA,uBAAe/B,EAAUO,IACvBsB,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASC,QAAS,kBAPlCN,EAAcrB,EAAY,GAAMP,EAAUmC,OAAS,EAAI5B,EAAY,QACnEM,QAAQC,IAAIP,IAMiD6B,MAAM,WAEjEP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACXR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,iBAAkB,SAACC,EAAGhC,EAAMiC,GAAa5B,QAAQC,IAAI0B,EAAEhC,KAAKQ,IAAKH,QAAQC,IAAId,IAC7E0C,cAAepC,EAAiBC,MAGtCsB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gBACEF,EAAAC,EAAAC,cAAA,iCAEAF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,QAAQU,GAAG,SAASC,KAAK,UAAUR,MAAM,MACrDP,EAAAC,EAAAC,cAAA,SAAOc,IAAI,UAAX,UAAkChB,EAAAC,EAAAC,cAAA,WAElCF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,QAAQU,GAAG,YAAYC,KAAK,UAAUR,MAAM,MACxDP,EAAAC,EAAAC,cAAA,SAAOc,IAAI,aAAX,aAAwChB,EAAAC,EAAAC,cAAA,eCtDnCe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAT,EAAA,GAAAU,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDRW,EAAOC,SAASC,eAAe,QACrCC,IAASC,OACPjC,EAAAC,EAAAC,cAACF,EAAAC,EAAMiC,WAAP,KACElC,EAAAC,EAAAC,cAACiC,EAAD,OAEFN,GAMFZ","file":"static/js/main.6f27fb27.chunk.js","sourcesContent":["import React from 'react';\nimport { transpose, simplify } from '@tonaljs/note';\nimport { Note } from \"@tonaljs/tonal\";\nimport Range from \"@tonaljs/range\";\nimport Collection from \"@tonaljs/collection\";\nimport { Fretboard } from 'react-canvas-fretboard';\n\nimport './App.css';\n\nconst ALL_NOTES = Collection.shuffle(Range.chromatic([\"E2\", \"E5\"], { sharps: true }));\nconst ALL_INTERVALS = ['m3', 'M3', 'P5'];\n\n// let queryItem = {\n//   interval: 'm3',\n//   note: ALL_NOTES[noteIndex],\n//   answer: transpose(note, interval)\n// };\n\nfunction getSelectedNotes(noteIndex) {\n  let interval = 'M3';\n  let note = ALL_NOTES[noteIndex];\n  let noteAnswer = Note.get(transpose(note, interval));\n  console.log(noteAnswer)\n  let answer = noteAnswer.pc;\n  console.log(`note: ${note} answer: ${answer}`);\n  return [\n    {\n      note: note,\n      color: 'blue'\n      //label: 'truck'\n\n    },\n    {\n      note: simplify(answer),\n      color: 'red',\n      displayNoteName: false\n    }\n  ];\n}\n\nfunction App() {\n  const [noteIndex, setNoteIndex] = React.useState(0);\n  function increaseNoteIndex() {\n    setNoteIndex((noteIndex + 1) >= ALL_NOTES.length ? 0 : noteIndex + 1);\n    console.log(noteIndex);\n  }\n  return (\n    <>\n      <h2>Note: {ALL_NOTES[noteIndex]}</h2>\n      <h2>Interval: {ALL_NOTES[noteIndex]}</h2>\n      { <input type=\"button\" onClick={() => increaseNoteIndex()} value=\"Change\"/> }\n\n      <div className=\"App\">\n          <Fretboard\n            onFretboardClick={(e, note, string) => { console.log(e.note.pc); console.log(ALL_NOTES); }}\n            selectedNotes={getSelectedNotes(noteIndex)}\n          />\n      </div>\n      <div>\n        <fieldset>\n          <legend>Audio Options: </legend>\n\n          <input type=\"radio\" id=\"kraken\" name=\"monster\" value=\"K\" />\n          <label for=\"kraken\">Kraken</label><br />\n\n          <input type=\"radio\" id=\"sasquatch\" name=\"monster\" value=\"S\" />\n          <label for=\"sasquatch\">Sasquatch</label><br />\n        </fieldset>\n      </div>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = document.getElementById('root');\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  root\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}