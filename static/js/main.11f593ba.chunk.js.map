{"version":3,"sources":["MediaAudioTuner.js","App.js","reportWebVitals.js","index.js"],"names":["audioContext","window","AudioContext","analyserNode","createAnalyser","fftSize","buffer","Float32Array","MediaAudioTuner","props","_React$useState","React","useState","_React$useState2","Object","slicedToArray","source","setSource","_React$useState3","_React$useState4","isMicStarted","setMicStarted","_React$useState5","_React$useState6","setClearNoteTimer","pitchFinder","Pitchfinder","threshold","sampleRate","probabilityThreshold","setInterval","getFloatTimeDomainData","pitch","note","Note","fromFreq","octave","clearNoteTimer","clearNotePlayed","console","log","concat","setNotePlayed","startRecording","_ref","asyncToGenerator","_regeneratorRuntime","mark","_callee","input","wrap","_context","prev","next","getMicInput","sent","state","resume","createMediaStreamSource","stop","apply","this","arguments","navigator","mediaDevices","getUserMedia","audio","echoCancellation","autoGainControl","noiseSuppression","latency","useEffect","connect","react_default","a","createElement","type","value","onClick","disconnect","ALL_INTERVALS","QUIZ_ITEMS","ALL_NOTES","Collection","shuffle","Range","chromatic","sharps","li","i","length","d","j","get","simplify","transpose","name","pitchClass","push","App","noteIndex","setNoteIndex","isCorrect","setCorrect","useRandomInterval","setUseRandomInterval","_React$useState7","_React$useState8","selectedInterval","setSelectedInterval","_React$useState9","_React$useState10","notePlayed","selectInteralOption","e","option","moveNextQuizItem","Math","floor","random","Fragment","map","className","key","checked","onChange","newValue","toggleUseRandomInterval","react_canvas_fretboard_dist_index_es","onFretboardClick","string","answer","chroma","pc","setTimeout","checkAnswer","selectedNotes","results","color","getSelectedNotes","selectedNotesOct","displayNoteName","darkMode","src_MediaAudioTuner","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","root","document","getElementById","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.11f593ba.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as Pitchfinder from \"pitchfinder\";\r\nimport { Note } from \"@tonaljs/tonal\";\r\n\r\n/*\r\n  Code is heavily taken from https://github.com/dgvai/webaudio-pitch-tuner\r\n*/\r\n\r\nconst audioContext = new window.AudioContext();\r\nconst analyserNode = audioContext.createAnalyser();\r\nconst BUFFER_SIZE = 2048\r\nanalyserNode.fftSize = BUFFER_SIZE;\r\nconst buffer = new Float32Array(BUFFER_SIZE);\r\n//const buffer = new Uint8Array(BUFFER_SIZE);\r\n\r\n\r\nconst MediaAudioTuner = (props) => {\r\n    const [source, setSource] = React.useState(null);\r\n    const [isMicStarted, setMicStarted] = React.useState(false);\r\n    const [clearNoteTimer, setClearNoteTimer] = React.useState(null);\r\n    const pitchFinder = Pitchfinder.YIN({\r\n        threshold: 0.3,\r\n        sampleRate: 44100,\r\n        probabilityThreshold: 0.4\r\n    });\r\n\r\n    //const pitchFinder = Pitchfinder.AMDF();\r\n\r\n    const detectPitch = () => {\r\n        analyserNode.getFloatTimeDomainData(buffer);\r\n        //analyserNode.getByteTimeDomainData(buffer);\r\n\r\n        const pitch = pitchFinder(buffer); // null if pitch cannot be identified\r\n        if (pitch) {\r\n            const note = Note.fromFreq(pitch);\r\n            if (2 <= Note.octave(note) && Note.octave(note) <= 6) {\r\n                //if (props.notePlayed !== note) {\r\n                if (clearNoteTimer) {\r\n                    clearNotePlayed();\r\n                }\r\n                console.log(`pitch: ${pitch} ${note}`)\r\n                props.setNotePlayed(note);\r\n                let clearNoteTimer = setInterval(clearNotePlayed, 500);\r\n                setClearNoteTimer(clearNoteTimer);\r\n                //}\r\n            }\r\n\r\n        }\r\n    };\r\n    setInterval(detectPitch, 1);\r\n\r\n    const clearNotePlayed = () => {\r\n        props.setNotePlayed('');\r\n        setClearNoteTimer(null);\r\n    }\r\n\r\n\r\n    const startRecording = async () => {\r\n        const input = await getMicInput();\r\n        setMicStarted(true)\r\n        console.log('Clicked start recording...');\r\n\r\n        if (audioContext.state === \"suspended\") {\r\n            await audioContext.resume();\r\n        }\r\n\r\n        setSource(audioContext.createMediaStreamSource(input));\r\n    }\r\n\r\n    const getMicInput = () => {\r\n        return navigator.mediaDevices.getUserMedia({\r\n            audio: {\r\n                echoCancellation: false,\r\n                autoGainControl: false,\r\n                noiseSuppression: false,\r\n                latency: 0,\r\n            },\r\n        });\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (source != null) {\r\n            source.connect(analyserNode);\r\n        }\r\n    }, [source]);\r\n\r\n    const stop = () => {\r\n        source.disconnect(analyserNode);\r\n        setMicStarted(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!isMicStarted ?\r\n                <input type=\"button\" value=\"Start Microphone\" onClick={() => startRecording()} />\r\n                :\r\n                <input type=\"button\" value=\"Stop Microphone\" onClick={() => stop()} />\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MediaAudioTuner;","import React from 'react';\nimport { transpose, simplify } from '@tonaljs/note';\nimport { Note } from \"@tonaljs/tonal\";\nimport Range from \"@tonaljs/range\";\nimport Collection from \"@tonaljs/collection\";\nimport { Fretboard } from 'react-canvas-fretboard';\n\nimport MediaAudioTuner from './MediaAudioTuner';\n\nimport './App.css';\n\nconst ALL_INTERVALS = ['P1', 'm2', 'M2', 'm3', 'M3', 'P4', 'P5', 'm6', 'M6', 'm7', 'M7'];\nconst QUIZ_ITEMS = (() => {\n  const ALL_NOTES = Collection.shuffle(Range.chromatic([\"E2\", \"E5\"], { sharps: true }));\n  let li = [];\n  for (let i = 0; i < ALL_NOTES.length; i++) {\n    let d = {};\n    for (let j = 0; j < ALL_INTERVALS.length; j++) {\n      d[ALL_INTERVALS[j]] = (ALL_INTERVALS[j] === 'P1') ?\n        Note.get(simplify(transpose(ALL_NOTES[i], ALL_INTERVALS[j]))).name : // get note with octave for P1\n        Note.pitchClass(simplify(transpose(ALL_NOTES[i], ALL_INTERVALS[j])));\n    }\n    li.push(d);\n  }\n\n  //console.log(JSON.stringify(li));\n  return li;\n})();\n\nfunction App() {\n  const [noteIndex, setNoteIndex] = React.useState(0);\n  const [isCorrect, setCorrect] = React.useState(false);\n  const [useRandomInterval, setUseRandomInterval] = React.useState(false);\n  const [selectedInterval, setSelectedInterval] = React.useState('m3');\n  const [notePlayed, setNotePlayed] = React.useState(null);\n\n\n  function selectInteralOption(e, option) {\n    console.log(`${e} -> ${option}`)\n    setSelectedInterval(option)\n    //if (e) e.preventDefault();\n  }\n\n  function moveNextQuizItem() {\n    setCorrect(false);\n\n    if (useRandomInterval) {\n      selectInteralOption(null, ALL_INTERVALS[Math.floor(Math.random() * ALL_INTERVALS.length)]);\n    }\n    setNoteIndex((noteIndex + 1) >= QUIZ_ITEMS.length ? 0 : noteIndex + 1);\n  }\n\n  function getSelectedNotes(noteIndex) {\n    const answer = QUIZ_ITEMS[noteIndex];\n    let results = [\n      {\n        note: answer['P1'],\n        color: 'blue'\n      }\n    ];\n    if (isCorrect) {\n      results.push(\n        {\n          note: answer[selectedInterval],\n          color: 'red'\n        }\n      )\n    }\n    if (notePlayed) {\n      results.push(\n        {\n          note: notePlayed,\n          color: 'yellow'\n        }\n      )\n    }\n    return results;\n  }\n\n  function checkAnswer(e) {\n    let answer = QUIZ_ITEMS[noteIndex];\n    if (Note.chroma(answer[selectedInterval]) === Note.chroma(e.note.pc)) {\n      setCorrect(true);\n      setTimeout(() => {\n        moveNextQuizItem()\n      }, 700);\n    }\n  }\n\n  const toggleUseRandomInterval = () => {\n    const newValue = !useRandomInterval;\n    setUseRandomInterval(newValue);\n    if (newValue) {\n      moveNextQuizItem();\n    }\n  }\n\n  return (\n    <>\n      <h1>Note: {Note.pitchClass(QUIZ_ITEMS[noteIndex]['P1'])} Interval: {selectedInterval}</h1>\n      <div>\n        <fieldset>\n          <legend>Interval Options</legend>\n          {ALL_INTERVALS.map((option, i) => {\n            return (\n              <>\n                <span className=\"intervalOption\">\n                  <input name=\"intervalSelection\"\n                    type=\"radio\"\n                    key={option}\n                    value={option}\n                    checked={option === selectedInterval}\n                    onChange={(e) => selectInteralOption(e, option)}>\n                  </input><label>{option}</label>\n                </span>\n              </>\n            );\n          })}\n          <span className=\"intervalOption\">\n            <input type=\"checkbox\" name=\"randomIntervalInput\" checked={useRandomInterval} onChange={() => toggleUseRandomInterval()} /><label>Random</label>\n          </span>\n          {<input type=\"button\" onClick={() => moveNextQuizItem()} value=\"Change Note\" />}\n        </fieldset>\n      </div>\n\n      <div className=\"App\">\n        <Fretboard\n          onFretboardClick={(e, note, string) => checkAnswer(e, note, string)}\n          selectedNotes={getSelectedNotes(noteIndex)}\n          selectedNotesOct={false}\n          displayNoteName={false}\n          darkMode={true}\n        />\n      </div>\n      <div>\n        <fieldset>\n          <legend>Audio Options</legend>\n          <MediaAudioTuner setNotePlayed={setNotePlayed} />\n        </fieldset>\n      </div>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = document.getElementById('root');\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  root\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}