{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ALL_INTERVALS","QUIZ_ITEMS","ALL_NOTES","Collection","shuffle","Range","chromatic","sharps","li","i","length","d","j","Note","pitchClass","simplify","transpose","push","console","log","JSON","stringify","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","noteIndex","setNoteIndex","_React$useState3","_React$useState4","isCorrect","setCorrect","_React$useState5","_React$useState6","selectedInterval","setSelectedInterval","moveNextQuizItem","react_default","a","createElement","Fragment","map","option","name","type","key","value","checked","onChange","concat","selectOption","onClick","className","react_canvas_fretboard_dist_index_es","onFretboardClick","e","note","string","answer","chroma","pc","setTimeout","checkAnswer","selectedNotes","results","color","getSelectedNotes","selectedNotesOct","displayNoteName","darkMode","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","root","document","getElementById","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.769fb50a.chunk.js","sourcesContent":["import React from 'react';\nimport { transpose, simplify } from '@tonaljs/note';\nimport { Note } from \"@tonaljs/tonal\";\nimport Range from \"@tonaljs/range\";\nimport Collection from \"@tonaljs/collection\";\nimport { Fretboard } from 'react-canvas-fretboard';\n\nimport './App.css';\n\nconst ALL_INTERVALS = ['P1', 'm2', 'M2', 'm3', 'M3', 'P4', 'P5', 'm6', 'M6', 'm7', 'M7'];\nconst QUIZ_ITEMS = (() => {\n  const ALL_NOTES = Collection.shuffle(Range.chromatic([\"E2\", \"E5\"], { sharps: true }));\n  let li = [];\n  for (let i = 0; i < ALL_NOTES.length; i++) {\n    let d = {};\n    for (let j = 0; j < ALL_INTERVALS.length; j++) {\n      d[ALL_INTERVALS[j]] = Note.pitchClass(simplify(transpose(ALL_NOTES[i], ALL_INTERVALS[j])));\n    }\n    li.push(d);\n  }\n\n  console.log(JSON.stringify(li));\n  return li;\n})();\n\n\n\nfunction App() {\n  const [noteIndex, setNoteIndex] = React.useState(0);\n  const [isCorrect, setCorrect] = React.useState(false);\n  const [selectedInterval, setSelectedInterval] = React.useState('m3');\n\n  function selectOption(option) {\n    console.log(`selected ${option}`)\n    setSelectedInterval(option)\n  }\n\n  function moveNextQuizItem() {\n    setNoteIndex((noteIndex + 1) >= QUIZ_ITEMS.length ? 0 : noteIndex + 1);\n    setCorrect(false);\n  }\n\n  function getSelectedNotes(noteIndex) {\n    const answer = QUIZ_ITEMS[noteIndex];\n    let results = [\n      {\n        note: answer['P1'],\n        color: 'blue'\n      }\n    ];\n    if (isCorrect) {\n      results.push(\n        {\n          note: answer[selectedInterval],\n          color: 'red'\n        }\n      )\n    }\n    return results;\n  }\n\n  function checkAnswer(e) {\n    let answer = QUIZ_ITEMS[noteIndex];\n    console.log(`${Note.chroma(answer[selectedInterval])} === ${Note.chroma(e.note.pc)}`);\n    if (Note.chroma(answer[selectedInterval]) === Note.chroma(e.note.pc)) {\n      setCorrect(true);\n      let timer = setTimeout(() => { moveNextQuizItem() }, 1200);\n    }\n  }\n\n  return (\n    <>\n      <h2>Note: {Note.pitchClass(QUIZ_ITEMS[noteIndex]['P1'])}</h2>\n      <div>\n        <fieldset>\n          <legend>Interval Options</legend>\n          {ALL_INTERVALS.map((option, i) => {\n            return (\n              <>\n                <span>\n                  <input name=\"intervalSelection\"\n                    type=\"radio\"\n                    key={option}\n                    value={option}\n                    checked={option === selectedInterval}\n                    onChange={() => selectOption(option)}>\n                  </input><label>{option}</label>\n                </span>\n              </>\n            );\n          })}\n        </fieldset>\n      </div>\n      {<input type=\"button\" onClick={() => moveNextQuizItem()} value=\"Change\" />}\n\n      <div className=\"App\">\n        <Fretboard\n          onFretboardClick={(e, note, string) => checkAnswer(e)}\n          selectedNotes={getSelectedNotes(noteIndex)}\n          selectedNotesOct={false}\n          displayNoteName={false}\n          darkMode={true}\n        />\n      </div>\n      <div>\n        <fieldset>\n          <legend>Audio Options</legend>\n        </fieldset>\n      </div>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = document.getElementById('root');\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  root\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}